! -- Author :    D. HECK IK FZK KARLSRUHE       07/03/1996
    ! =======================================================================

    Subroutine dpmjlk

      ! ----------------------------------------------------------------------
      ! DPMJ(ET) L(IN)K

      ! LINKING SUBROUT. TO DPMJET-II
      ! THIS SUBROUTINE IS CALLED FROM SDPM
      ! ----------------------------------------------------------------------

      Implicit Double Precision (A-H, O-Z)

      Common /crdpmflg/nflain, nfldif, nflpi0, nflche, nflpif, nfragm
      Integer nflain, nfldif, nflpi0, nflche, nflpif, nfragm

      Common /crinter/avch, avch3, dc0, dlog, dmlog, ecmdif, ecmdpm, elab, &
        fneut, fneut2, gnu, plab, posc2, posc3, posn2, posn3, rc3to2, s, &
        seugf, seugp, slog, slogsq, smlog, widc2, widc3, widn2, widn3, ycm, &
        yy0, zn, idif, itar
      Double Precision avch, avch3, dc0, dlog, dmlog, ecmdif, ecmdpm, elab, &
        fneut, fneut2, gnu, plab, posc2, posc3, posn2, posn3, rc3to2, s, &
        seugf, seugp, slog, slogsq, smlog, widc2, widc3, widn2, widn3, ycm, &
        yy0, zn
      Integer idif, itar

      Common /crpam/pama, signum, restms, dectim
      Double Precision pama(6000), signum(6000), restms(6000), dectim(200)

      Common /crparpar/curpar, secpar, prmpar, outpar, c, & 
        e00, e00pn, ptot0, ptot0n, thickh, itype, levl

      Double Precision curpar(0:16), secpar(0:16), prmpar(0:16), outpar(0:16), &

        c(50), e00, e00pn, ptot0, ptot0n, thickh
      Integer itype, levl

      Double Precision gamma, costhe, phix, phiy, h, t, x, y, chi, beta, gcm, &
        ecm & 
        , weight & 
        , happ, costap, costea

      Equivalence (curpar(1), gamma), (curpar(2), costhe), (curpar(3), phix), &
        (curpar(4), phiy), (curpar(5), h), (curpar(6), t), (curpar(7), x), &
        (curpar(8), y), (curpar(9), chi), (curpar(10), beta), &
        (curpar(11), gcm), (curpar(12), ecm) & 
        , (curpar(13), weight) & 
        , (curpar(14), happ), (curpar(15), costap), (curpar(16), costea)

      Common /crrandpa/rd, fac, u1, u2, nseq, iseed, knor
      Double Precision rd(3000), fac, u1, u2
      Integer iseed(3, 10), nseq
      Logical knor

      Common /crrest/contne, tar, lt
      Double Precision contne(3), tar
      Integer lt

      Common /crrunpar/fixhei, thick0, hiloecm, hiloelb, sig1i, targ1i, &
        stepfc, & 
        sigmaq, & 
        nrrun, nshow, mpatap, moniin, moniou, mdebug, nucnuc, mtabout, &
        mlongout, iseed1i, & 
        propmod, lstck, & 
        lstck1, lstck2, ishowno, ishw, nopart, nrecs, nblks, maxprt, ndebdl, &
        n1sttr, mdbase, & 
        debdel, debug, fdecay, fegs, firsti, fixinc, fixtar, fix1i, fmuadd, &
        fnkg, fprint, fdbase, fparout, ftabout, flongout, gheish, ghesig, &
        gheisdb, uselow, tmargin & 
        , foutfile, ifinam & 
        , fflatout
      Common /crrunpac/datdir, dsn, dsntab, dsnlong, host, user & 
        , lstdsn, filout
      Double Precision fixhei, thick0, hiloecm, hiloelb, sig1i, targ1i, stepfc

      Double Precision sigmaq(4)

      Integer nrrun, nshow, mpatap, moniin, moniou, mdebug, nucnuc, ishowno, &
        ishw, nopart, nrecs, nblks, maxprt, ndebdl, n1sttr, mdbase, mtabout, &
        mlongout, iseed1i(3)

      Integer propmod
      Integer lstck & 
        , lstck1, lstck2
      Character *132 filout

      Character *255 dsn, dsntab, dsnlong
      Character *132 datdir
      Character *20 host, user

      Character *9 lstdsn
      Logical debdel, debug, fdecay, fegs, firsti, fixinc, fixtar, fix1i, &
        fmuadd, fnkg, fprint, fdbase, fparout, ftabout, flongout, gheish, &
        ghesig, gheisdb, uselow, tmargin & 
        , fflatout

      Logical foutfile
      Integer ifinam

      Common /crdpmdbg/e000, irand
      Double Precision e000
      Integer irand(3)

      Common /crdpmjet/levldb, idpmver, fdpmjt, fdpjsg
      Integer levldb, idpmver
      Logical fdpmjt, fdpjsg

      Common /crdpmlin/ictabl
      Integer ictabl(200)

      Common /kainit/umoda, inich1, inich2, inich3, inich4, inich5, inich6, &
        inich7, inich8, inich9, iretur, kais, inipri, nusept, musept, istart
      Double Precision umoda
      Integer inich1, inich2, inich3, inich4, inich5, inich6, inich7, inich8, &
        inich9, iretur, kais, inipri, nusept, musept
      Logical istart


      Parameter (intmd=252)
      Parameter (intmx=2488)
      Parameter (maxpro=8)
      Parameter (mxafbk=16)
      Parameter (mxffbk=6)
      Parameter (mxnfbk=10)
      Parameter (mxpsfb=41000)
      Parameter (mxpsst=300)
      Parameter (mxzfbk=9)
      Parameter (nmxhkk=49998)
      Parameter (nxafbk=mxafbk+1)
      Parameter (nxnfbk=12)
      Parameter (nxzfbk=11)
      Dimension dsig1(0:maxpro)
      Common /cmhico/cmhis
      Common /collap/s3, ijproj1, ijtar1, ptthr1, ptthr3, iophrd1, ijprlu1, &
        ijtalu1
      Common /collis/ss, ijprox, ijtar, ptthr, ptthr2, iophrd, ijprlu, ijtalu
      Common /diqi/ipvq(248), ippv1(248), ippv2(248), itvq(248), ittv1(248), &
        ittv2(248), ipsq(intmx), ipsq2(intmx), ipsaq(intmx), ipsaq2(intmx), &
        itsq(intmx), itsq2(intmx), itsaq(intmx), itsaq2(intmx), kkproj(248), &
        kktarg(248)
      Character *8 aname
      Common /dpar/aname(210), aam(210), ga(210), tau(210), iich(210), &
        iibar(210), k1(210), k2(210)
      Common /dprin/ipri, ipev, ippa, ipco, init, iphkk, itopd, ipaupr
      Common /evappp/ievap
      Common /extevt/idres(nmxhkk), idxres(nmxhkk), nobam(nmxhkk), &
        idbam(nmxhkk), idch(nmxhkk), npoint(10)
      Common /final/ifinal
      Logical lfrmbk, lncmss
      Common /frbkcm/amufbk, eexfbk(mxpsst), amfrbk(mxpsst), exfrbk(mxpsfb), &
        sdmfbk(mxpsfb), coufbk(mxpsfb), exmxfb, r0frbk, r0cfbk, c1cfbk, &
        c2cfbk, ifrbkn(mxpsst), ifrbkz(mxpsst), ifbksp(mxpsst), &
        ifbkpr(mxpsst), ifbkst(mxpsst), ipsind(0:mxnfbk, 0:mxzfbk, 2), &
        jpsind(0:mxafbk), ifbind(0:nxnfbk, 0:nxzfbk, 2), jfbind(0:nxafbk), &
        ifbcha(5, mxpsfb), iposst, iposfb, ifbstf, ifbfrb, nbufbk, lfrmbk, &
        lncmss
      Common /hkkevt/nhkk, nevhkk, isthkk(nmxhkk), idhkk(nmxhkk), &
        jmohkk(2, nmxhkk), jdahkk(2, nmxhkk), phkk(5, nmxhkk), &
        vhkk(4, nmxhkk), whkk(4, nmxhkk)
      Common /ifroto/ifrovp(248), itovp(248), ifrosp(intmx), ifrovt(248), &
        itovt(248), ifrost(intmx), jsshs(intmx), jtshs(intmx), jhkknp(248), &
        jhkknt(248), jhkkpv(intmx), jhkkps(intmx), jhkktv(intmx), &
        jhkkts(intmx), mhkkvv(intmx), mhkkss(intmx), mhkkvs(intmx), &
        mhkksv(intmx), mhkkhh(intmx), mhkkdv(248), mhkkvd(248), mhkkds(intmd), &
        mhkksd(intmd)
      Common /inpflg/iang, ifiss, ib0, igeom, istrag, keydk
      Common /nncms/gamcm, bgcm, umo, pcm, eproj, pproj
      Common /nucc/it, itz, ip, ipz, ijproj, ibproj, ijtarg, ibtarg
      Common /nucimp/prmom(5, 248), tamom(5, 248), prmfep, prmfen, tamfep, &
        tamfen, prefep, prefen, taefep, taefen, prepot(210), taepot(210), &
        prebin, taebin, fermod, etacou
      Logical ldiffr, linctv, levprt, lheavy, ldeexg, lgdhpr, lpreex, lhlfix, &
        lprfix, lparwv, lpower, lsngch, llvmod, lschdf
      Common /parevt/dpower, fsprd0, fshpfn, rn1gsc, rn2gsc, ldiffr(39), &
        lpower, linctv, levprt, lheavy, ldeexg, lgdhpr, lpreex, lhlfix, &
        lprfix, lparwv, ilvmod, jlvmod, llvmod, lsngch, lschdf
      Common /pomtyp/ipim, icon, isig, lmax, mmax, nmax, difel, difnu
      Common /pydat1/mstu(200), paru(200), mstj(200), parj(200)
      Common /rptshm/rproj, rtarg, bimpac
      Common /seasu3/seasq
      Common /shmakl/jssh(intmx), jtsh(intmx), inter1(intmx), inter2(intmx)
      Common /sigma/sigsof, bs, zsof, sighar, fill(7)
      Common /strufu/istrum, istrut
      Common /taufo/taufor, ktauge, itauve, incmod
      Character *80 titled
      Character *8 projty, targty
      Common /user1/titled, projty, targty
      Common /user2/cmener, sdfrac, ptlar, istruf, isingx, idubld
      Common /xseadi/xseacu, unon, unom, unosea, cvq, cdq, csea, ssmima, &
        ssmimq, vvmthr
      Common /xsecpt/ptcut, sigs, dsigh
      ! DOUBLE PRECISION PPNPN(4)
      Save
      ! ----------------------------------------------------------------------

      If (debug) Then
        Write (mdebug, *) 'DPMJLK: TAR=', tar
        ipri = levldb
        ipev = levldb
        ippa = levldb
        ipco = levldb
        init = levldb
        iphkk = levldb
        mstu(22) = 10
        mstu(26) = 10
      Else
        ipri = 0
        ipev = 0
        ippa = 0
        ipco = -2
        init = 0
        iphkk = 0
        mstu(22) = 0
        mstu(26) = 0
      End If
      ! RESET ALL INDICATORS FOR FIRST INITIALIZATION OF COMMON /KAINIT/
      umoda = 0.D0
      inich1 = 0
      inich2 = 0
      inich3 = 0
      inich4 = 0
      inich5 = 0
      inich6 = 0
      inich7 = 0
      inich8 = 0
      inich9 = 0
      kais = 0
      inipri = 0
      nusept = 0
      musept = 0
      istart = .True.

      ! non-decay must be reset before each interaction
      ipromu = 0
      ! cccc
      ! INITIALIZE PYTHIA FOR UNSTABLE PARTICLES NOT TO DECAY
      ! MUST BE DONE AS IN THE CHARM OPTION THOSE PARTICLES
      ! ARE DECLACRED TO DECAY
      Call lundin

      ! SET TARGET PARAMETERS
      If (tar==14.D0) Then
        it = 14
        itz = 7
        kkmat = 1
      Else If (tar==16.D0) Then
        it = 16
        itz = 8
        kkmat = 2
      Else If (tar==40.D0) Then
        it = 40
        itz = 18
        kkmat = 3
      Else
        it = tar
        itz = int(tar/2.15D0+0.7D0)
        kkmat = 0
      End If
      amtar = aam(1)
      If (debug) Write (mdebug, *) 'DPMJLK: AFTER TAGET SELECTION'
      ! DPMJET CANNOT TREAT STRANGE ANTI-BARYONS AND STRANGENESS 2 AND 3
      If ((itype>=7 .And. itype<=21) .Or. (itype>=25 .And. itype<=26) & 
      ! *    .OR. ( ITYPE .GE. 116  .AND.  ITYPE .LE. 121 )
      ! *    .OR. ( ITYPE .GE. 137  .AND.  ITYPE .LE. 157 )

        ) Then
        ! ORDINARY HADRONIC PROJECTILE
        If (itype==10 .Or. itype==16) Then
          ! TRANSFORM K(0)L/S  TO  K(0) OR ANTI-K(0)
          Call rmmard(rd, 1, 1)
          If (rd(1)>=0.5D0) Then
            ijproj = 24
          Else
            ijproj = 25
          End If
        Else
          ijproj = ictabl(itype)
        End If
        ijprox = ijproj
        ibproj = iibar(ijproj)
        ip = 1
        ipz = 1
        epn = gamma*pama(itype)
        elab = epn
        isingd = 1
        isingx = 1
        idubld = 0
        sdfrac = 1.D0

        ifinal = 1
        ievap = 0
        taufor = 105.
        ktauge = 0
        levprt = .False.
        ilvmod = 1
        ldeexg = .False.
        lheavy = .False.
        lfrmbk = .False.
        ifiss = 0

      Else If (itype>=200) Then
        ! NUCLEUS PROJECTILE
        ibproj = 1
        ijproj = 1
        ijprox = 1
        ip = itype/100
        ipz = mod(itype, 100)
        epn = gamma*0.5D0*(pama(13)+pama(14))
        elab = gamma*pama(itype)
        If (itype==402) Then
          ! FOR HELIUM PROJECTILES GLAUBER DATA ARE AVAILABLE
          If (kkmat>=1) kkmat = kkmat + 3
        Else If (itype==1407) Then
          ! FOR NITROGEN PROJECTILES GLAUBER DATA ARE AVAILABLE
          If (kkmat>=1) kkmat = kkmat + 6
        Else If (itype==5626) Then
          ! FOR IRON PROJECTILES GLAUBER DATA ARE AVAILABLE
          If (kkmat>=1) kkmat = kkmat + 9
        Else
          kkmat = 0
        End If
        ievap = 1
        isingd = 0
        isingx = 0
        idubld = 0
        sdfrac = 0.D0

        If (nfragm<=4) Then
          ifinal = 1
          ievap = 0
          taufor = 105.D0
          ktauge = 0
          levprt = .False.
          ilvmod = 1
          ldeexg = .False.
          lheavy = .False.
          lfrmbk = .False.
          ifiss = 0
        Else
          ifinal = 0
          ievap = 1
          taufor = 5.D0
          ktauge = 25
          levprt = .True.
          ilvmod = 1
          ldeexg = .True.
          lheavy = .True.
          lfrmbk = .False.
          lfrmbk = .True.
          ifiss = 0
        End If

      Else If (itype==1) Then
        ! GAMMA PROJECTILE
        ibproj = 23
        ijproj = 23
        ijprox = iibar(ijproj)
        ip = 1
        ipz = 1
        epn = gamma
        elab = epn
        isingd = 1
        isingx = 1
        idubld = 0
        sdfrac = 1.D0

        ifinal = 1
        ievap = 0
        taufor = 105.
        ktauge = 0
        levprt = .False.
        ilvmod = 1
        ldeexg = .False.
        lheavy = .False.
        lfrmbk = .False.
        ifiss = 0

      Else
        Write (moniou, *) 'DPMJLK: NOT PREPARED FOR CORSIKA PROJECTILE TYPE=', &
          itype
        Stop
      End If
      If (debug) Write (mdebug, *) 'DPMJLK: AFTER PROJECTILE SELECTION'
      If (debug) Write (mdebug, *) 'DPMJLK: KKMAT=', kkmat

      amproj = aam(ijproj)
      ppn = sqrt((epn-amproj)*(epn+amproj))
      pproj = ppn
      eproj = epn
      umo = sqrt(amproj**2+amtar**2+2.D0*amtar*eproj)
      cmener = umo
      ss = umo**2

      If (istrut==1) Then
        ptthr = 2.1D0 + 0.15D0*(log10(cmener/50.))**3
        ptthr2 = ptthr
      Else If (istrut==2) Then
        ptthr = 2.5D0 + 0.12D0*(log10(cmener/50.))**3
        ptthr2 = ptthr
      End If
      gamcm = (eproj+amtar)/umo
      bgcm = pproj/umo
      pcm = gamcm*pproj - bgcm*eproj
      If (debug) Write (mdebug, *) 'DPMJLK: AMPROJ,PPN=', amproj, ppn
      alfa = 1.076D0
      a = 37.8D0
      sigsof = a*ss**(alfa-1.D0)

      If (ip>1 .And. it>1) Then
        ! DIFFRACTION PARAMETERS IN NUCLEUS NUCLEUS COLLISION
        isingd = 0
        isingx = 0
      Else
        ! DIFFRACTION PARAMETERS IN NUCLEON NUCLEUS COLLISION
        isingd = 1
        isingx = 1
      End If

      ptcut = ptthr
      If (debug) Write (mdebug, *) 'DPMJLK: BEFORE CSJ1MI'
      Call csj1mi(ptcut, dsig1)
      If (debug) Write (mdebug, *) 'DPMJLK: AFTER CSJ1MI'
      sig1 = dsig1(0)
      dsigh = sig1
      ! INITIALIZE TRANSVERSE MOMENTA FOR SOFT SCATTERING
      Call samppt(0, pt)
      If (debug) Write (mdebug, *) 'DPMJLK: AFTER SAMPPT'

      iit = it
      iitz = itz
      iip = ip
      iipz = ipz
      iiproj = ijproj
      e000 = epn
      If (debug) Then
        ! RANDOM GENERATOR STATUS (SEQUENCE L=1) AT BEGINNING OF EVENT
        ll = 1
        Call rmmaqd(iseed(1,ll), ll, 'R')
        ! SEED
        irand(1) = iseed(1, ll)
        ! NUMBER OF CALLS
        irand(2) = iseed(2, ll)
        ! NUMBER OF BILLIONS
        irand(3) = iseed(3, ll)
        Write (mdebug, 100)(irand(j), j=1, 3)
100     Format (' DPMJLK: RANDOM NUMBER GENERATOR AT BEGIN OF EVENT:', /, &
          ('         SEQUENCE = 1  SEED =',I9,'  CALLS =',I9,'  BILLIONS =', &
          I9))
      End If

      ! INITIALIZE HARD SCATTERING
      s3 = ss
      ijproj1 = ijprox
      ijtar1 = ijtar
      ptthr1 = ptthr
      iophrd1 = iophrd
      ijprlu1 = ijprlu
      ijtalu1 = ijtalu
      ptthr3 = ptthr2

      If (kkmat==0) Then
        ! WRITE(MONIOU,*) 'DPMJLK: STOPPED BECAUSE OF KKMAT = 0'
        ! STOP
        ! GLAUBER DATA ARE NOT AVAILABLE AND MUST BE CALCULATED (IGLAUB = 1)
        If (debug) Write (moniou, *) 'DPMJLK: BEFORE SHMAKI'
        Call shmaki(ip, ipz, it, itz, rproj, rtarg, ppn)
      End If

      ! ----------------------------------------------------------------------
      If (ipev>=6) Then
        Write (6, '(/A,I5/5X,A)') ' DPMJLK: IP=', ip, &
          ' J,IPVQ(J),IPPV1(J),IPPV2(J),ISTHKK,KKPROJ,PRMOM'
        Do j = 1, ip
          Write (6, '(I4,5I3,5(1P,E11.3))') j, isthkk(j), kkproj(j), ipvq(j), &
            ippv1(j), ippv2(j), (prmom(jj,j), jj=1, 5)
        End Do

        Write (6, '(/A,I5/5X,A)') ' KKEVT : IT=', it, &
          ' J,ITVQ(J),ITTV1(J),ITTV2(J),ISTHKK,KKTARG,TAMOM'
        ihkk = ip
        Do j = 1, it
          ihkk = ihkk + 1
          Write (6, '(I4,5I3,5(1P,E11.3))') j, isthkk(ihkk), kktarg(j), &
            itvq(j), ittv1(j), ittv2(j), (tamom(jj,j), jj=1, 5)
        End Do
      End If

      If (debug) Write (mdebug, *) 'DPMJLK: NOW KKINC IS CALLED WITH IJPROJ=', &
        ijproj, ' IT=', it

      ! NOW THE REAL WORK STARTS
      ! 200  CONTINUE
      If (iip==1) Then
        ! FOR HADRON-NUCLEUS COLLISIONS
        elabt = epn*0.001D0
        iiipro = iiproj
        iiip = iip
        iiipz = iipz
        iiit = iit
        iiitz = iitz
        Call dpmevt(elabt, iiipro, iiip, iiipz, iiit, iiitz, kkmat, nhkkh1)
      Else
        ! FOR NUCLEUS-NUCLEUS COLLISIONS WITH PROJECTILE FRAGMENTATION
        elabt = epn*0.001D0
        iiipro = iiproj
        iiip = iip
        iiipz = iipz
        iiit = iit
        iiitz = iitz
        Call dpmevt(elabt, iiipro, iiip, iiipz, iiit, iiitz, kkmat, nhkkh1)
      End If

      ! STORE SECONDARY PARTICLES TO STACK
!       Call dpmjst

      Return
    End Subroutine dpmjlk


!     ! =======================================================================

!     ! -- Author :    D. HECK IK FZK KARLSRUHE       11/11/1996
!     ! =======================================================================

!     Subroutine dpmjst

!       ! ----------------------------------------------------------------------
!       ! DPMJ(ET) ST(ORE)

!       ! STORES THE SECONDARY PARTICLES OF DPMJET INTO CORSIKA
!       ! THIS SUBROUTINE IS CALLED FROM DPMJLK
!       ! ----------------------------------------------------------------------

!       Implicit Double Precision (A-H, O-Z)

!       Common /crconsta/pi, pi2, ob3, tb3, eneper
!       Double Precision pi, pi2, ob3, tb3, eneper

!       Common /crdpmflg/nflain, nfldif, nflpi0, nflche, nflpif, nfragm
!       Integer nflain, nfldif, nflpi0, nflche, nflpif, nfragm

!       Common /creladpm/elmean, elmeaa, ieldpm, ieldpa
!       Double Precision elmean(40), elmeaa(40)
!       Integer ieldpm(40, 13), ieldpa(40, 13)

!       Common /crelasty/elast
!       Double Precision elast

!       Common /crgener/gen, alevel
!       Double Precision gen, alevel


!       Common /crinter/avch, avch3, dc0, dlog, dmlog, ecmdif, ecmdpm, elab, &
!         fneut, fneut2, gnu, plab, posc2, posc3, posn2, posn3, rc3to2, s, &
!         seugf, seugp, slog, slogsq, smlog, widc2, widc3, widn2, widn3, ycm, &
!         yy0, zn, idif, itar
!       Double Precision avch, avch3, dc0, dlog, dmlog, ecmdif, ecmdpm, elab, &
!         fneut, fneut2, gnu, plab, posc2, posc3, posn2, posn3, rc3to2, s, &
!         seugf, seugp, slog, slogsq, smlog, widc2, widc3, widn2, widn3, ycm, &
!         yy0, zn
!       Integer idif, itar

!       Common /crista/ifinet, ifinnu, ifinka, ifinpi, ifinhy, ifincm, ifinot
!       Integer ifinet, ifinnu, ifinka, ifinpi, ifinhy, ifincm, ifinot

!       Integer lngmax
!       Parameter (lngmax=15000)
!       Common /crlongi/adlong, aelong, aplong, dlong, elong, hlong, plong, &
!         sdlong, selong, splong, thstep, thstpi, lheigh, nstep, llongi, flgfit
!       Double Precision adlong(0:lngmax, 19), aelong(0:lngmax, 10), &
!         aplong(0:lngmax, 10), dlong(0:lngmax, 19), elong(0:lngmax, 10), &
!         hlong(0:lngmax), plong(0:lngmax, 10), sdlong(0:lngmax, 19), &
!         selong(0:lngmax, 10), splong(0:lngmax, 10), thstep, thstpi

!       Integer lheigh, nstep
!       Logical llongi, flgfit



!       Common /crmult/ekinl, msmm, multma, multot
!       Double Precision ekinl
!       Integer msmm, multma(40, 13), multot(40, 13)

!       Common /crpam/pama, signum, restms, dectim
!       Double Precision pama(6000), signum(6000), restms(6000), dectim(200)

!       Common /crparpar/curpar, secpar, prmpar, outpar, c, & 
!         e00, e00pn, ptot0, ptot0n, thickh, itype, levl

!       Double Precision curpar(0:16), secpar(0:16), prmpar(0:16), outpar(0:16), &

!         c(50), e00, e00pn, ptot0, ptot0n, thickh
!       Integer itype, levl

!       Double Precision gamma, costhe, phix, phiy, h, t, x, y, chi, beta, gcm, &
!         ecm & 
!         , weight & 
!         , happ, costap, costea

!       Equivalence (curpar(1), gamma), (curpar(2), costhe), (curpar(3), phix), &
!         (curpar(4), phiy), (curpar(5), h), (curpar(6), t), (curpar(7), x), &
!         (curpar(8), y), (curpar(9), chi), (curpar(10), beta), &
!         (curpar(11), gcm), (curpar(12), ecm) & 
!         , (curpar(13), weight) & 
!         , (curpar(14), happ), (curpar(15), costap), (curpar(16), costea)

!       Common /crrandpa/rd, fac, u1, u2, nseq, iseed, knor
!       Double Precision rd(3000), fac, u1, u2
!       Integer iseed(3, 10), nseq
!       Logical knor

!       Common /crrest/contne, tar, lt
!       Double Precision contne(3), tar
!       Integer lt

!       Common /crrunpar/fixhei, thick0, hiloecm, hiloelb, sig1i, targ1i, &
!         stepfc, & 
!         sigmaq, & 
!         nrrun, nshow, mpatap, moniin, moniou, mdebug, nucnuc, mtabout, &
!         mlongout, iseed1i, & 
!         propmod, lstck, & 
!         lstck1, lstck2, & 
!       ! #if __ANAHIST__||__AUGERHIST__||__MUONHIST__
!       ! *                 LUNHST,
!       ! #endif
!         ishowno, ishw, nopart, nrecs, nblks, maxprt, ndebdl, n1sttr, mdbase, &

!         debdel, debug, fdecay, fegs, firsti, fixinc, fixtar, fix1i, fmuadd, &
!         fnkg, fprint, fdbase, fparout, ftabout, flongout, gheish, ghesig, &
!         gheisdb, uselow, tmargin & 
!         , foutfile, ifinam & 
!         , fflatout
!       Common /crrunpac/datdir, dsn, dsntab, dsnlong, host, user & 
!         , lstdsn, filout
!       Double Precision fixhei, thick0, hiloecm, hiloelb, sig1i, targ1i, stepfc

!       Double Precision sigmaq(4)

!       Integer nrrun, nshow, mpatap, moniin, moniou, mdebug, nucnuc, ishowno, &
!         ishw, nopart, nrecs, nblks, maxprt, ndebdl, n1sttr, mdbase, mtabout, &
!         mlongout, iseed1i(3)

!       Integer propmod
!       Integer lstck & 
!         , lstck1, lstck2
!       Character *132 filout

!       Character *255 dsn, dsntab, dsnlong
!       Character *132 datdir
!       Character *20 host, user

!       Character *9 lstdsn
!       Logical debdel, debug, fdecay, fegs, firsti, fixinc, fixtar, fix1i, &
!         fmuadd, fnkg, fprint, fdbase, fparout, ftabout, flongout, gheish, &
!         ghesig, gheisdb, uselow, tmargin & 
!         , fflatout

!       Logical foutfile
!       Integer ifinam


!       Common /crsigm/sigma, sigann, sigair, fractn, frctno, sigairs
!       Double Precision sigma, sigann, sigair, fractn, frctno, sigairs

!       Common /crdpmdbg/e000, irand
!       Double Precision e000
!       Integer irand(3)

!       Common /crdpmlin/ictabl
!       Integer ictabl(200)

!       Parameter (nmxhkk=49998)
!       Common /extevt/idres(nmxhkk), idxres(nmxhkk), nobam(nmxhkk), &
!         idbam(nmxhkk), idch(nmxhkk), npoint(10)
!       Common /hkkevt/nhkk, nevhkk, isthkk(nmxhkk), idhkk(nmxhkk), &
!         jmohkk(2, nmxhkk), jdahkk(2, nmxhkk), phkk(5, nmxhkk), &
!         vhkk(4, nmxhkk), whkk(4, nmxhkk)
!       Common /nucc/it, itz, ip, ipz, ijproj, ibproj, ijtarg, ibtarg

!       Double Precision pfrx(60), pfry(60), ptm, ptot, cphiv, sphiv
!       Double Precision fac1, fac2
!       Integer ityp(60), ll
!       Save
!       ! ----------------------------------------------------------------------

!       If (debug) Then
!         Write (mdebug, *) 'DPMJST:', nhkk, ' ENTRIES'
!         Do i = 1, nhkk
!           Write (6, 100) i, isthkk(i), idhkk(i), jmohkk(1, i), jmohkk(2, i), &
!             jdahkk(1, i), jdahkk(2, i), (phkk(khkk,i), khkk=1, 5), &
!             (vhkk(khkk,i), khkk=1, 4)
! 100       Format (I6, I4, 5I6, 9(1P,E10.2))
!         End Do
!       End If

!       ! RESET COUNTERS
!       iprojs = 0
!       itargs = 0
!       iwounp = 0
!       iwount = 0
!       nptls = 0
!       inew = 0
!       emax = 0.D0
!       etot = 0.D0

!       If (debug) Write (mdebug, *) 'DPMJST: NHKK=', nhkk, ' NFRAGM=', nfragm
!       ! LOOP OVER ALL PARTICLES IN COMMON /HKKEVT/
!       Do j = 1, nhkk
!         If (isthkk(j)==1) Then
!           ! ORDINARY SECONDARY PARTICLE, KEEP IT
!           nptls = nptls + 1

!         Else If (isthkk(j)==11) Then
!           ! PARTICLE IS WOUNDED PROJECTILE NUCLEON
!           iwounp = iwounp + 1
!           kodcrs = 0
!           Go To 120

!         Else If (isthkk(j)==12) Then
!           ! PARTICLE IS WOUNDED TARGET NUCLEON
!           iwount = iwount + 1
!           kodcrs = 0
!           Go To 120

!         Else If (isthkk(j)==13) Then
!           ! PARTICLE IS PROJECTILE SPECTATOR, KEEP IT
!           iprojs = iprojs + 1
!           If (nfragm==0) Then
!             ! FOR TOTAL FRAGMENTATON
!             phkk(4, j) = gamma*phkk(5, j)
!             phkk(1, j) = 0.D0
!             phkk(2, j) = 0.D0
!             phkk(3, j) = (phkk(4,j)+phkk(5,j))*(phkk(4,j)-phkk(5,j))
!           Else If (nfragm>=1 .And. nfragm<=4) Then
!             ! FOR NON-FRAGMENTATION: FORM PROJECTILE RESIDUAL
!             inew = inew + 100
!             If (idhkk(j)==2212) inew = inew + 1
!             kodcrs = 0
!             Go To 120
!           Else
!             kodcrs = 0
!             Go To 120
!           End If

!         Else If (isthkk(j)==14) Then
!           ! PARTICLE IS SPECTATOR TARGET NUCLEON
!           itargs = itargs + 1

!           kodcrs = 0
!           Go To 120

!         Else If (isthkk(j)==16) Then
!           ! PARTICLE IS BOUND  IN TARGET NUCLEUS
!           itargs = itargs + 1

!           kodcrs = 0
!           Go To 120

!         Else If (isthkk(j)==1001) Then
!           ! PARTICLE IS REMAINDER OF PROJECTILE OR TARGET NUCLEUS
!           If (nfragm<5) Then
!             kodcrs = 0
!             Go To 120
!           Else
!             kodcrs = idres(j)*100 + idxres(j)
!           End If

!         Else If (isthkk(j)==-1) Then
!           ! PARTICLE IS EVAPORATED  FRAGMENT
!           If (nfragm<5) Then
!             kodcrs = 0
!             Go To 120
!           Else
!             If (idhkk(j)==80000) Then
!               ! PARTICLE IS FRAGMENT NUCLEUS
!               If (nobam(j)==1) Then
!                 ! PROJECTILE FRAGMENT
!                 iprojs = iprojs + idres(j)
!                 kodcrs = idres(j)*100 + idxres(j)
!               Else If (nobam(j)==2) Then
!                 ! TARGET FRAGMENT
!                 itargs = itargs + idres(j)

!                 ! DISREGARD TARGET FRAGMENTS
!                 kodcrs = 0
!                 Go To 120

!               End If
!             Else
!               If (idhkk(j)==2212 .Or. idhkk(j)==2112) Then
!                 ! EVAPORATED NUCLEON
!                 If (nobam(j)==1) Then
!                   iprojs = iprojs + 1
!                 Else If (nobam(j)==2) Then
!                   itargs = itargs + 1
!                 End If
!               Else
!                 ! EVAPORATED ORDINARY PARTICLE
!                 nptls = nptls + 1
!               End If
!             End If

!           End If

!         Else
!           ! PARTICLE HAS DECAYED OR IS INTERMEDIATE STATE
!           kodcrs = 0
!           Go To 120
!         End If

!         ! CONVERT DATA PARTICLE GROUP CODE TO CORSIKA CODE
!         ! MESONS
!         If (idhkk(j)==111) Then
!           kodcrs = 7
!         Else If (idhkk(j)==211) Then
!           kodcrs = 8
!         Else If (idhkk(j)==-211) Then
!           kodcrs = 9
!         Else If (idhkk(j)==221) Then
!           kodcrs = 17
!           ! NUCLEONS
!         Else If (idhkk(j)==2112) Then
!           kodcrs = 13
!         Else If (idhkk(j)==2212) Then
!           kodcrs = 14
!         Else If (idhkk(j)==-2212) Then
!           kodcrs = 15
!         Else If (idhkk(j)==-2112) Then
!           kodcrs = 25
!           ! STRANGE MESONS
!         Else If (idhkk(j)==130) Then
!           kodcrs = 10
!         Else If (idhkk(j)==321) Then
!           kodcrs = 11
!         Else If (idhkk(j)==-321) Then
!           kodcrs = 12
!         Else If (idhkk(j)==310) Then
!           kodcrs = 16
!         Else If (idhkk(j)==311 .Or. idhkk(j)==-311) Then
!           Call rmmard(rd, 1, 1)
!           If (rd(1)>=0.5D0) Then
!             kodcrs = 10
!           Else
!             kodcrs = 16
!           End If
!           ! STRANGE BARYONS
!         Else If (idhkk(j)==3122) Then
!           kodcrs = 18
!         Else If (idhkk(j)==3222) Then
!           kodcrs = 19
!         Else If (idhkk(j)==3212) Then
!           kodcrs = 20
!         Else If (idhkk(j)==3112) Then
!           kodcrs = 21
!         Else If (idhkk(j)==3322) Then
!           kodcrs = 22
!         Else If (idhkk(j)==3312) Then
!           kodcrs = 23
!         Else If (idhkk(j)==3334) Then
!           kodcrs = 24
!         Else If (idhkk(j)==-3122) Then
!           kodcrs = 26
!         Else If (idhkk(j)==-3222) Then
!           kodcrs = 27
!         Else If (idhkk(j)==-3212) Then
!           kodcrs = 28
!         Else If (idhkk(j)==-3112) Then
!           kodcrs = 29
!         Else If (idhkk(j)==-3322) Then
!           kodcrs = 30
!         Else If (idhkk(j)==-3312) Then
!           kodcrs = 31
!         Else If (idhkk(j)==-3334) Then
!           kodcrs = 32
!           ! GAMMAS
!         Else If (idhkk(j)==22) Then
!           kodcrs = 1
!           ! LEPTONS
!         Else If (idhkk(j)==-11) Then
!           kodcrs = 2
!         Else If (idhkk(j)==11) Then
!           kodcrs = 3
!         Else If (idhkk(j)==-13) Then
!           kodcrs = 5
!         Else If (idhkk(j)==13) Then
!           kodcrs = 6

!           ! TAU LEPTONS
!         Else If (idhkk(j)==-15) Then
!           kodcrs = 131
!         Else If (idhkk(j)==15) Then
!           kodcrs = 132
!           ! CHARMED MESONS
!         Else If (idhkk(j)==421) Then
!           kodcrs = &               ! D(0)
!             116
!         Else If (idhkk(j)==411) Then
!           kodcrs = &               ! D(+)
!             117
!         Else If (idhkk(j)==-411) Then
!           kodcrs = &               ! D(-)
!             118
!         Else If (idhkk(j)==-421) Then
!           kodcrs = &               ! CHARMED MESONS WITH STRANGENESS
!             119
!           ! A-D(0)
!         Else If (idhkk(j)==431) Then
!           kodcrs = &               ! D_S(+)
!             120
!         Else If (idhkk(j)==-431) Then
!           kodcrs = &               ! CHARMED ETA MESON
!             121
!           ! D_S(-)
!         Else If (idhkk(j)==441 .Or. idhkk(j)==-441) Then
!           kodcrs = &               ! EXCITED CHARMED MESONS
!             122
!           ! ETA_C
!         Else If (idhkk(j)==423) Then
!           kodcrs = &               ! D*(0)
!             123
!         Else If (idhkk(j)==413) Then
!           kodcrs = &               ! D*(+)
!             124
!         Else If (idhkk(j)==-413) Then
!           kodcrs = &               ! D*(-)
!             125
!         Else If (idhkk(j)==-423) Then
!           kodcrs = &               ! A-D*(0)
!             126
!         Else If (idhkk(j)==433) Then
!           kodcrs = &               ! D_S*(+)
!             127
!         Else If (idhkk(j)==-433) Then
!           kodcrs = &               ! D_S*(-)
!             128
!         Else If (idhkk(j)==443 .Or. idhkk(j)==-443) Then
!           kodcrs = &               ! CHARMED BARYONS
!             130
!           ! J/PSI
!         Else If (idhkk(j)==4122) Then
!           kodcrs = &               ! LAMBDA_C(+)
!             137
!         Else If (idhkk(j)==4232) Then
!           kodcrs = &               ! XI_C(+)
!             138
!         Else If (idhkk(j)==4132) Then
!           kodcrs = &               ! XI_C(0)
!             139
!         Else If (idhkk(j)==4222) Then
!           kodcrs = &               ! SIGMA_C(++)
!             140
!         Else If (idhkk(j)==4212) Then
!           kodcrs = &               ! SIGMA_C(+)
!             141
!         Else If (idhkk(j)==4112) Then
!           kodcrs = &               ! SIGMA_C(0)
!             142
!         Else If (idhkk(j)==4322) Then
!           kodcrs = &               ! XI_C*(+)
!             143
!         Else If (idhkk(j)==4312) Then
!           kodcrs = &               ! XI_C*(0)
!             144
!         Else If (idhkk(j)==4332) Then
!           kodcrs = &               ! OMEGA_C(0)
!             145
!         Else If (idhkk(j)==-4122) Then
!           kodcrs = &               ! A-LAMBDA_C(-)
!             149
!         Else If (idhkk(j)==-4232) Then
!           kodcrs = &               ! A-XI_C(-)
!             150
!         Else If (idhkk(j)==-4132) Then
!           kodcrs = &               ! A-XI-C(0)
!             151
!         Else If (idhkk(j)==-4222) Then
!           kodcrs = &               ! A-SIGMA_C(--)
!             152
!         Else If (idhkk(j)==-4212) Then
!           kodcrs = &               ! A-SIGMA_C(-)
!             153
!         Else If (idhkk(j)==-4112) Then
!           kodcrs = &               ! A-SIGMA_C(0)
!             154
!         Else If (idhkk(j)==-4322) Then
!           kodcrs = &               ! A-XI_C*(-)
!             155
!         Else If (idhkk(j)==-4312) Then
!           kodcrs = &               ! A-XI_C*(0)
!             156
!         Else If (idhkk(j)==-4332) Then
!           kodcrs = &               ! EXCITED CHARMED BARYONS
!             157
!           ! A-OMEGA_C(0)
!         Else If (idhkk(j)==4224) Then
!           kodcrs = &               ! SIGMA_C*(++)
!             161
!         Else If (idhkk(j)==4214) Then
!           kodcrs = &               ! SIGMA_C*(+)
!             162
!         Else If (idhkk(j)==4114) Then
!           kodcrs = &               ! SIGMA_C*(0)
!             163
!         Else If (idhkk(j)==-4224) Then
!           kodcrs = &               ! A-SIGMA_C*(--)
!             171
!         Else If (idhkk(j)==-4214) Then
!           kodcrs = &               ! A-SIGMA_C*(-)
!             172
!         Else If (idhkk(j)==-4114) Then
!           kodcrs = &               ! DOUBLE CHARMED BARYONS CANNOT BE TREATED,
!                                    ! TAKE CHARMED STRANGE BARYS
!             173
!           ! A-SIGMA_C*(0)
!         Else If (idhkk(j)==4422) Then
!           kodcrs = 138
!         Else If (idhkk(j)==4412) Then
!           kodcrs = 144
!         Else If (idhkk(j)==4432) Then
!           kodcrs = 145
!         Else If (idhkk(j)==-4422) Then
!           kodcrs = 155
!         Else If (idhkk(j)==-4412) Then
!           kodcrs = 156
!         Else If (idhkk(j)==-4432) Then
!           kodcrs = 157
!           ! TRIPLE CHARMED BARYONS CANNOT BE TREATED, TAKE CHARMED STRANGE
!           ! BARYS
!         Else If (idhkk(j)==4444) Then
!           kodcrs = 145
!         Else If (idhkk(j)==-4444) Then
!           kodcrs = 157
!           ! NEUTRINOS
!         Else If (idhkk(j)==12) Then
!           kodcrs = 66
!         Else If (idhkk(j)==-12) Then
!           kodcrs = 67
!         Else If (idhkk(j)==14) Then
!           kodcrs = 68
!         Else If (idhkk(j)==-14) Then
!           kodcrs = 69
!           ! TAU NEUTRINOS

!         Else If (idhkk(j)==16) Then
!           kodcrs = 133
!         Else If (idhkk(j)==-16) Then
!           kodcrs = 134
!           ! PROJECTILE FRAGMENT NUCLEUS
!         Else If (idhkk(j)==80000) Then
!           kodcrs = idres(j)*100 + idxres(j)

!         Else
!           Write (moniou, *) 'DPMJST: UNKNOWN PARTICLE CODE=', idhkk(j)
!           Stop
!         End If
!         secpar(0) = kodcrs

!         ! 100    CONTINUE
!         If ((kodcrs>1 .And. kodcrs<=65) .Or. kodcrs>=200) Then
!           ! ORDINARY SECONDARY PARTICLES (WITHOUT GAMMAS AND NEUTRINOS)
!           secpar(1) = phkk(4, j)/pama(kodcrs)
!           ! DISREGARD PROJECTILE SPECTATORS FOR ELASTICITY
!           If (isthkk(j)==13 .Or. isthkk(j)==15) Go To 110
!           ! DISREGARD EVAPORATED PARTICLES FOR ELASTICITY
!           If (isthkk(j)==-1) Go To 110

!           ! C        IF ( SECPAR(1) .GT. GAMMAX ) THEN
!           ! C          GAMMAX = SECPAR(1)
!           ! CALCULATE ELASTICITY FROM ENERGY OF FASTEST PARTICLE (LEADER)
!           ! C          ELASTI = GAMMAX * PAMA(KODCRS) / ELAB
!           ! C        ENDIF
!           If (secpar(1)*pama(kodcrs)>emax) Then
!             emax = secpar(1)*pama(kodcrs)
!             ! CALCULATE ELASTICITY FROM MOST ENERGETIC PARTICLE (LEADER)
!             ! ELASTI = EMAX / ELAB
!             elasti = emax/e000
!           End If
!         Else
!           ! GAMMAS AND NEUTRINOS
!           secpar(1) = phkk(4, j)
!         End If

!         ! COUNTER FOR ENERGY-MULTIPLICITY MATRIX
!         msmm = msmm + 1

!         ! DETERMINE ANGLES FROM LONGITUDINAL AND TRANSVERSAL MOMENTA
! 110     Continue
!         pt2 = phkk(1, j)**2 + phkk(2, j)**2
!         pl2 = phkk(3, j)**2
!         If (pl2+pt2<=0.D0) Then
!           ptot = 0.D0
!           costet = 0.D0
!           cphiv = 1.D0
!           sphiv = 0.D0
!         Else
!           ptot = sqrt(pl2+pt2)
!           costet = max(min(phkk(3,j)/ptot,1.D0), -1.D0)
!           cphiv = max(min(phkk(1,j)/ptot,1.D0), -1.D0)
!           sphiv = max(min(phkk(2,j)/ptot,1.D0), -1.D0)
!         End If

!         etot = etot + phkk(4, j)
!         Call addang4(costhe, phix, phiy, costet, cphiv, sphiv, secpar(2), &
!           secpar(3), secpar(4))

!         If (secpar(2)>c(29)) Then

!           If (nfragm>=5 .And. kodcrs>=200) Then
!             If (int(kodcrs/100)==8) Then
!               ! REMAINING NUCLEUS: MASS 8 CANNOT BE TREATED IN BOX2
!               If (mod(kodcrs,100)>=5) Then
!                 ! MASS 8: SPLIT OFF ONE PROTON
!                 secpar(0) = 14.D0
!                 Call tstack
!                 kodcrs = kodcrs - 101
!               Else If (mod(kodcrs,100)<=3) Then
!                 ! MASS 8: SPLIT OFF ONE NEUTRON
!                 secpar(0) = 13.D0
!                 Call tstack
!                 kodcrs = kodcrs - 100
!               Else
!                 ! MASS 8: SPLIT OFF ONE ALPHA PARTICLE
!                 secpar(0) = 402.D0
!                 Call tstack
!                 kodcrs = kodcrs - 402
!               End If
!             Else If (int(kodcrs/100)==5) Then
!               ! REMAINING NUCLEUS: MASS 5 CANNOT BE TREATED IN BOX2
!               If (mod(kodcrs,100)>=3) Then
!                 ! MASS 5: SPLIT OFF ONE PROTON
!                 secpar(0) = 14.D0
!                 Call tstack
!                 kodcrs = kodcrs - 101
!               Else
!                 ! MASS 5: SPLIT OFF ONE NEUTRON
!                 secpar(0) = 13.D0
!                 Call tstack
!                 kodcrs = kodcrs - 100
!               End If
!             End If
!             secpar(0) = kodcrs

!           End If
!           ! IF WE HAVE HERE A MUON OR A NEUTRINO IT MUST COME FROM CHARM DECAY
!           !
!           ! INCREMENT GENERATION COUNTER BY 30 FOR MU(+-) AND NU FROM CHARM
!           ! DECAY
!           If (kodcrs==5 .Or. kodcrs==6) Then
!             secpar(9) = gen + 30.D0
!           Else If (kodcrs>=66 .And. kodcrs<=69) Then
!             secpar(9) = gen + 30.D0
!           Else
!             secpar(9) = gen
!           End If
!           Call tstack
!         Else
!           If (llongi) Then
!             ! ADD ENERGY TO LONGITUDINAL ENERGY DEPOSIT
!             If (kodcrs<=3) Then
!               dlong(lheigh, 13) = dlong(lheigh, 13) + phkk(4, j) - &
!                 restms(kodcrs)
!             Else If (kodcrs==5 .Or. kodcrs==6) Then
!               dlong(lheigh, 15) = dlong(lheigh, 15) + phkk(4, j)

!             Else If ((kodcrs>=66 .And. kodcrs<=69) & 
!                 .Or. kodcrs==133 .Or. kodcrs==134 & 
!                 ) Then
!               dlong(lheigh, 18) = dlong(lheigh, 18) + phkk(4, j)

!             Else If (kodcrs>=7) Then
!               If (kodcrs==8 .Or. kodcrs==9 .Or. kodcrs==11 .Or. kodcrs==12) &
!                 Then
!                 fac1 = 0.25D0
!                 fac2 = 0.75D0
!               Else If (kodcrs==10 .Or. kodcrs==16) Then
!                 fac1 = 0.5D0
!                 fac2 = 0.5D0
!               Else
!                 fac1 = 1.D0
!                 fac2 = 0.D0
!               End If
!               ! ADD TO THE HADRON ENERGY DEPOSIT
!               dlong(lheigh, 17) = dlong(lheigh, 17) + &
!                 (phkk(4,j)-restms(kodcrs))*fac1
!               ! ADD TO THE NEUTRINO DEPOSIT
!               dlong(lheigh, 18) = dlong(lheigh, 18) + &
!                 (phkk(4,j)-restms(kodcrs))*fac2

!             End If
!           End If
!         End If

!         ! COUNTERS FOR FIRST INTERACTION
!         If (firsti) Then
!           If (kodcrs==7 .Or. kodcrs==8 .Or. kodcrs==9) Then
!             ifinpi = ifinpi + 1
!           Else If (kodcrs==13 .Or. kodcrs==14 .Or. kodcrs==15 .Or. kodcrs==25) &
!               Then
!             ifinnu = ifinnu + 1
!           Else If (kodcrs==10 .Or. kodcrs==11 .Or. kodcrs==12 .Or. kodcrs==16) &
!               Then
!             ifinka = ifinka + 1
!           Else If (kodcrs==17) Then
!             ifinet = ifinet + 1
!           Else If ((kodcrs>=18 .And. kodcrs<=24) .Or. &
!               (kodcrs>=26 .And. kodcrs<=32)) Then
!             ifinhy = ifinhy + 1

!           Else If ((kodcrs>=116 .And. kodcrs<=130) .Or. &
!               (kodcrs>=137 .And. kodcrs<=173)) Then
!             ifincm = ifincm + 1

!           Else
!             ifinot = ifinot + 1
!           End If
!         End If
!         Go To 120
!         If (llongi) Then
!           ! ADD NEUTRINO ENERGY TO LONGITUDINAL ENERGY DEPOSIT

!           dlong(lheigh, 8) = dlong(lheigh, 8) + phkk(4, j)

!         End If

! 120     Continue
!         If (debug) Write (mdebug, *) 'DPMJST: J=', j, ' KODCRS=', kodcrs, &
!           ' ISTHKK=', isthkk(j)
!       End Do

!       If (nfragm>=1 .And. nfragm<=4) Then
!         If (inew==0) Go To 160
!         ! TREAT REMAINING NUCLEUS
!         If (debug) Write (mdebug, 130) inew, (curpar(i), i=1, 8)
! 130     Format (' DPMJST: REMNNT=', 1P, I10, 8E11.3)
!         secpar(0) = curpar(0)
!         secpar(1) = curpar(1)
!         secpar(2) = curpar(2)
!         secpar(3) = curpar(3)
!         secpar(4) = curpar(4)

!         If (inew==100) Then
!           ! REMAINING NUCLEUS IS SINGLE NEUTRON
!           secpar(0) = 13.D0
!           Call tstack
!           etot = etot + secpar(1)*pama(13)
!           Go To 160

!         Else If (inew==101) Then
!           ! REMAINING NUCLEUS IS SINGLE PROTON
!           secpar(0) = 14.D0
!           Call tstack
!           etot = etot + secpar(1)*pama(14)
!           Go To 160

!         Else If (inew==102) Then
!           ! REMAINING NUCLEUS IS DIPROTON
!           secpar(0) = 14.D0
!           Call tstack
!           Call tstack
!           etot = etot + 2.D0*secpar(1)*pama(14)
!           Go To 160

!         Else If (inew==200) Then
!           ! REMAINING NUCLEUS IS DINEUTRON
!           secpar(0) = 13.D0
!           Call tstack
!           Call tstack
!           etot = etot + 2.D0*secpar(1)*pama(13)
!           Go To 160

!         Else
!           ! REMAINING NUCLEUS IS ONE FRAGMENT
!           nznew = mod(inew, 100)
!           nnnew = inew/100 - nznew
!         End If

!         If (nfragm==1) Then
!           knew = inew

!         Else If (nfragm>=2 .And. nfragm<=4) Then
!           ! REMAINING NUCLEUS IS EVAPORATING NUCLEONS AND ALPHA PARTICLES
!           jfin = 0
!           Call vapor(ip, inew, jfin, ityp, pfrx, pfry)
!           If (jfin==0) Go To 150
!           ! LOOP TO TREAT THE REMANENTS OF THE DESINTEGRATED FRAGMENT
!           knew = 0
!           Do j = 1, jfin
!             ea = gamma*pama(ityp(j))
!             If (debug) Write (mdebug, *) 'DPMJST: J,ITYP,EA=', j, ityp(j), &
!               sngl(ea)
!             ! MOMENTA SQUARED
!             ptm = (ea-pama(ityp(j)))*(ea+pama(ityp(j)))
!             pt2 = pfrx(j)**2 + pfry(j)**2
!             If (pt2>=ptm) Then
!               If (debug) Write (mdebug, *) 'DPMJST: PT REJECT PARTICLE', j
!               Go To 140
!             End If
!             If (ptm>0.D0) Then
!               costet = sqrt(1.D0-pt2/ptm)
!               pt3 = sqrt(ptm)
!               cphiv = pfrx(j)/pt3
!               sphiv = pfry(j)/pt3
!             Else
!               costet = 1.D0
!               cphiv = 1.D0
!               sphiv = 0.D0
!               pt3 = 0.D0
!             End If
!             Call addang4(costhe, phix, phiy, costet, cphiv, sphiv, secpar(2), &
!               secpar(3), secpar(4))

!             If (secpar(2)>c(29)) Then

!               If (j<jfin) Then
!                 secpar(0) = ityp(j)
!                 Call tstack
!               Else
!                 knew = ityp(jfin)
!               End If
!             Else
!               If (debug) Write (mdebug, *) 'DPMJST: ANGLE REJECT PARTICLE', j
!               If (llongi) Then
!                 ! ADD ENERGY TO LONGITUDINAL ENERGY DEPOSIT

!                 dlong(lheigh, 17) = dlong(lheigh, 17) + ea - restms(ityp(j))

!               End If
!             End If
! 140       End Do
!         End If

!         If (knew/100==5) Then
!           ! REMAINING NUCLEUS: MASS 5 CANNOT BE TREATED IN BOX2
!           If (mod(knew,100)>=3) Then
!             ! MASS 5: SPLIT OFF ONE PROTON
!             secpar(0) = 14.D0
!             Call tstack
!             knew = knew - 101
!           Else
!             ! MASS 5: SPLIT OFF ONE NEUTRON
!             secpar(0) = 13.D0
!             Call tstack
!             knew = knew - 100
!           End If
!         Else If (knew/100==8) Then
!           ! REMAINING NUCLEUS: MASS 8 CANNOT BE TREATED IN BOX2
!           If (mod(knew,100)>=5) Then
!             ! MASS 8: SPLIT OFF ONE PROTON
!             secpar(0) = 14.D0
!             Call tstack
!             knew = knew - 101
!           Else If (mod(knew,100)<=3) Then
!             ! MASS 8: SPLIT OFF ONE NEUTRON
!             secpar(0) = 13.D0
!             Call tstack
!             knew = knew - 100
!           Else
!             ! MASS 8: SPLIT OFF ONE ALPHA PARTICLE
!             secpar(0) = 402.D0
!             Call tstack
!             knew = knew - 402
!           End If
!         End If

!         ! CHECK IF A = Z (NOT ALLOWED IN DPMJET!) IN THIS CASE CHANGE
!         ! ONE PROTON TO A NEUTRON
!         If (knew/100==mod(knew,100)) knew = knew - 1
!         secpar(0) = knew
!         Call tstack
!       End If

! 150   etot = etot + secpar(1)*(pama(13)*nnnew+pama(14)*nznew)
! 160   Continue

!       If (debug) Then
!         Write (mdebug, *) 'DPMJST:', nptls, ' SECONDARY PARTICLES'
!         Write (mdebug, *) 'DPMJST: ELASTI,ETOT,ELAB=', elasti, etot, elab
!       End If

!       ! FILL ELASTICITY IN MATRICES
!       mel = min(1.D0+10.D0*max(0.D0,elasti), 11.D0)
!       men = min(4.D0+3.D0*log10(max(.1D0,ekinl)), 40.D0)

!       ieldpm(men, mel) = ieldpm(men, mel) + 1
!       ieldpa(men, mel) = ieldpa(men, mel) + 1
!       If (elasti<1.D0) Then
!         elmean(men) = elmean(men) + elasti
!         elmeaa(men) = elmeaa(men) + elasti

!       End If


!       If (firsti) Then
!         targ1i = tar
!         sig1i = sigair
!         elast = elasti
!         ! RANDOM GENERATOR STATUS (SEQUENCE L=1) AT END OF EVENT
!         ll = 1
!         Call rmmaqd(iseed(1,ll), ll, 'R')
!         ! SEED
!         iseed1i(1) = iseed(1, ll)
!         ! NUMBER OF CALLS
!         iseed1i(2) = iseed(2, ll)
!         ! NUMBER OF BILLIONS
!         iseed1i(3) = iseed(3, ll)
!         firsti = .False.
!       End If

!       Return
!     End Subroutine dpmjst
